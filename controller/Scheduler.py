from PIL import Image, ImageDraw
import numpy as np
# import cv2
import Config
import random
from typing import List
from controller import MarkCaptcha
from io import BytesIO
from controller.utils import Base64
from .DrawMarkedResult import DrawMarkedResult
from constants import IMAGE_POSITION_COORDINATES
from entities import ResultMarked
from entities import RequestMark
import base64
from .PreCheck import PreCheck


class Scheduler(object):
    
    def __init__(self):
        self._markCaptcha = MarkCaptcha()

    
    def markCaptcha(self, requestMark: RequestMark) -> ResultMarked:
        # check is valid
        PreCheck.checkImageIsValid(requestMark.originCaptcha)
        # get data from entity
        originCaptcha = requestMark.originCaptcha
        ids = self._markCaptcha.mark(originCaptcha)
        results = self._sumCoordinate(ids)
        markedCaptcha = str(base64.b64encode(
            DrawMarkedResult.rectangle(
                base64.b64decode(originCaptcha),
                ids
            )
        ), encoding="utf-8")
        return ResultMarked(
            originCaptcha=originCaptcha,
            ids=ids,
            results=results,
            markedCaptcha=markedCaptcha
        )
    
    def _sumCoordinate(self, ids: list) -> List[tuple]:
        """
        
        calculate coordinates based on marked result ids
        
        Args:
            ids: marked result id list

        Returns: example -> [(12, 43) ...]

        """
        markedResults = []
        for id in ids:
            a = IMAGE_POSITION_COORDINATES[id][0]
            b = IMAGE_POSITION_COORDINATES[id][1]
            x = random.randint(a[0] + 10, b[0] - 10)
            y = random.randint(a[1] + 10, b[1] - 10)
            markedResults.append((x, y))
        return markedResults
    
    # def drawMarkResult(self, imageByte: bytes, ids: list) -> bytes:
    #     return self._drawMarkedResult.rectangle(imageByte, ids)

if __name__ == '__main__':
    
    base64_str = ""
    s = Scheduler()
    d = DrawMarkedResult()
    # m = MarkCaptcha()
    # ids = m.mark(base64_str)
    ids = [5, 7]
    # resultBytes = d.checkmark(Base64.convertToBytes(base64_str), ids)
    # with open("marked.jpg", "wb") as f:
    #     f.write(resultBytes)
    print(s.sumCoordinate(ids))